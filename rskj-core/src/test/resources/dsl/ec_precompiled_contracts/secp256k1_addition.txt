# Simple Secp256k1 Addition DSL Test
# This test covers Secp256k1Addition (address 0x0000000000000000000000000000000001000016)
# Requires RSKIP516 to be active

comment
// CONTRACT CODE
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

// Uncomment this line to use console.log
// import "hardhat/console.sol";

contract Secp256k1Addition {
    event OK(string _message);
    event ERROR(string _message);

    function addUsingECPrecompiled() public returns (uint256 result) {
        uint256 x1 = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;
        uint256 y1 = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;
        uint256 x2 = x1;
        uint256 y2 = y1;

        bytes memory data = abi.encode(x1, y1, x2, y2);

        assembly {
            // address constant ADD_ADDR = address(0x0000000000000000000000000000000001000016);
            let success := staticcall(
                gas(),
                0x0000000000000000000000000000000001000016,
                add(data, 32),
                mload(data),
                0,
                32
            )

            // Check if staticcall was successful
            if iszero(success) {
                // If staticcall fails, set result to 0 to indicate failure
                result := 0
            }

            if success {
                // Only load the result if the call was successful
                result := mload(0)
            }
        }

        // Emit appropriate event based on success/failure
        if (result != 0) {
            emit OK("Success");
        } else {
            emit ERROR("Failure");
        }
    }
}

// CONTRACT BYTECODE

Secp256k1Addition: 6080604052348015600f57600080fd5b5061030d8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806323b33f2a14610030575b600080fd5b61003861004e565b604051610045919061018e565b60405180910390f35b6000807f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798905060007f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b89050600082905060008290506000848484846040516020016100bc94939291906101a9565b60405160208183030381529060405290506020600082516020840163010000165afa806100e857600096505b80156100f45760005196505b5060008614610137577f382b053c3e390141e30ffaa4b304fe54ebb25248c7c7dbe4b516cacdabbaadd460405161012a9061024b565b60405180910390a161016d565b7f0fbf1b9bd84515aa8d8e87ee83edeec345f774fc7c438063bad567cea7ed21be604051610164906102b7565b60405180910390a15b505050505090565b6000819050919050565b61018881610175565b82525050565b60006020820190506101a3600083018461017f565b92915050565b60006080820190506101be600083018761017f565b6101cb602083018661017f565b6101d8604083018561017f565b6101e5606083018461017f565b95945050505050565b600082825260208201905092915050565b7f5375636365737300000000000000000000000000000000000000000000000000600082015250565b60006102356007836101ee565b9150610240826101ff565b602082019050919050565b6000602082019050818103600083015261026481610228565b9050919050565b7f4661696c75726500000000000000000000000000000000000000000000000000600082015250565b60006102a16007836101ee565b91506102ac8261026b565b602082019050919050565b600060208201905081810360008301526102d081610294565b905091905056fea2646970667358221220e749d1f74b88ad679cf045ca59e7d30fc72fcec53bc361592b38a8822ab35a0c64736f6c634300081c0033

23b33f2a: addUsingECPrecompiled()

end

# Create test account with sufficient balance
account_new acc1 1000000000000000000000000

# Deploy Secp256k1Addition contract
# Contract bytecode for the provided Solidity contract
transaction_build tx01
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600f57600080fd5b5061030d8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806323b33f2a14610030575b600080fd5b61003861004e565b604051610045919061018e565b60405180910390f35b6000807f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798905060007f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b89050600082905060008290506000848484846040516020016100bc94939291906101a9565b60405160208183030381529060405290506020600082516020840163010000165afa806100e857600096505b80156100f45760005196505b5060008614610137577f382b053c3e390141e30ffaa4b304fe54ebb25248c7c7dbe4b516cacdabbaadd460405161012a9061024b565b60405180910390a161016d565b7f0fbf1b9bd84515aa8d8e87ee83edeec345f774fc7c438063bad567cea7ed21be604051610164906102b7565b60405180910390a15b505050505090565b6000819050919050565b61018881610175565b82525050565b60006020820190506101a3600083018461017f565b92915050565b60006080820190506101be600083018761017f565b6101cb602083018661017f565b6101d8604083018561017f565b6101e5606083018461017f565b95945050505050565b600082825260208201905092915050565b7f5375636365737300000000000000000000000000000000000000000000000000600082015250565b60006102356007836101ee565b9150610240826101ff565b602082019050919050565b6000602082019050818103600083015261026481610228565b9050919050565b7f4661696c75726500000000000000000000000000000000000000000000000000600082015250565b60006102a16007836101ee565b91506102ac8261026b565b602082019050919050565b600060208201905081810360008301526102d081610294565b905091905056fea2646970667358221220e749d1f74b88ad679cf045ca59e7d30fc72fcec53bc361592b38a8822ab35a0c64736f6c634300081c0033
    gas 2000000
    build

# Call the addUsingECPrecompiled function
transaction_build tx02
    sender acc1
    nonce 1
    contract tx01
    value 0
    data 23b33f2a
    gas 2000000
    build

# Build block with transactions
block_build b01
    parent g00
    gasLimit 3000000000
    transactions tx01 tx02
    build

# Connect block to blockchain
block_connect b01

# Assert best block
assert_best b01

# Assert contract deployment success
assert_tx_success tx01

# Assert function call success
assert_tx_success tx02 