# Simple Secp256k1 Multiplication DSL Test
# This test covers Secp256k1Multiplication (address 0x0000000000000000000000000000000001000017)
# Requires RSKIP516 to be active

comment
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

// Uncomment this line to use console.log
// import "hardhat/console.sol";

contract Secp256k1Multiplication {
    event OK(string _message);
    event ERROR(string _message);

    function mulUsingECPrecompiled() public returns (uint256 result) {
        uint256 x1 = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;
        uint256 y1 = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;
        uint256 s = 0x4;

        bytes memory data = abi.encode(x1, y1, s);

        assembly {
            // address constant MUL_ADDR = address(0x0000000000000000000000000000000001000017);
            let success := staticcall(
                gas(),
                0x0000000000000000000000000000000001000017,
                add(data, 32),
                mload(data),
                0,
                32
            )

            // Check if staticcall was successful
            if iszero(success) {
                // If staticcall fails, set result to 0 to indicate failure
                result := 0
            }

            if success {
                // Only load the result if the call was successful
                result := mload(0)
            }
        }

        // Emit appropriate event based on success/failure
        if (result != 0) {
            emit OK("Success");
        } else {
            emit ERROR("Failure");
        }
    }
}

// CONTRACT BYTECODE

Secp256k1Multiplication: 6080604052348015600f57600080fd5b506102f88061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063131d309e14610030575b600080fd5b61003861004e565b6040516100459190610187565b60405180910390f35b6000807f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798905060007f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8905060006004905060008383836040516020016100b6939291906101a2565b60405160208183030381529060405290506020600082516020840163010000175afa806100e257600095505b80156100ee5760005195505b5060008514610131577f382b053c3e390141e30ffaa4b304fe54ebb25248c7c7dbe4b516cacdabbaadd460405161012490610236565b60405180910390a1610167565b7f0fbf1b9bd84515aa8d8e87ee83edeec345f774fc7c438063bad567cea7ed21be60405161015e906102a2565b60405180910390a15b5050505090565b6000819050919050565b6101818161016e565b82525050565b600060208201905061019c6000830184610178565b92915050565b60006060820190506101b76000830186610178565b6101c46020830185610178565b6101d16040830184610178565b949350505050565b600082825260208201905092915050565b7f5375636365737300000000000000000000000000000000000000000000000000600082015250565b60006102206007836101d9565b915061022b826101ea565b602082019050919050565b6000602082019050818103600083015261024f81610213565b9050919050565b7f4661696c75726500000000000000000000000000000000000000000000000000600082015250565b600061028c6007836101d9565b915061029782610256565b602082019050919050565b600060208201905081810360008301526102bb8161027f565b905091905056fea26469706673582212202a49c54d642a3e85973e75d1e6518c826012ba7b0f24670a7daf44623dc34dec64736f6c634300081c0033

131d309e: mulUsingECPrecompiled()

end

# Create test account with sufficient balance
account_new acc1 1000000000000000000000000

# Deploy Secp256k1Multiplication contract
# Contract bytecode for a similar Solidity contract that calls multiplication
transaction_build tx01
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600f57600080fd5b506102f88061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063131d309e14610030575b600080fd5b61003861004e565b6040516100459190610187565b60405180910390f35b6000807f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798905060007f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8905060006004905060008383836040516020016100b6939291906101a2565b60405160208183030381529060405290506020600082516020840163010000175afa806100e257600095505b80156100ee5760005195505b5060008514610131577f382b053c3e390141e30ffaa4b304fe54ebb25248c7c7dbe4b516cacdabbaadd460405161012490610236565b60405180910390a1610167565b7f0fbf1b9bd84515aa8d8e87ee83edeec345f774fc7c438063bad567cea7ed21be60405161015e906102a2565b60405180910390a15b5050505090565b6000819050919050565b6101818161016e565b82525050565b600060208201905061019c6000830184610178565b92915050565b60006060820190506101b76000830186610178565b6101c46020830185610178565b6101d16040830184610178565b949350505050565b600082825260208201905092915050565b7f5375636365737300000000000000000000000000000000000000000000000000600082015250565b60006102206007836101d9565b915061022b826101ea565b602082019050919050565b6000602082019050818103600083015261024f81610213565b9050919050565b7f4661696c75726500000000000000000000000000000000000000000000000000600082015250565b600061028c6007836101d9565b915061029782610256565b602082019050919050565b600060208201905081810360008301526102bb8161027f565b905091905056fea26469706673582212202a49c54d642a3e85973e75d1e6518c826012ba7b0f24670a7daf44623dc34dec64736f6c634300081c0033
    gas 2000000
    build

# Call the multiplyUsingECPrecompiled function
transaction_build tx02
    sender acc1
    nonce 1
    contract tx01
    value 0
    data 131d309e
    gas 2000000
    build

# Build block with transactions
block_build b01
    parent g00
    gasLimit 3000000000
    transactions tx01 tx02
    build

# Connect block to blockchain
block_connect b01

# Assert best block
assert_best b01

# Assert contract deployment success
assert_tx_success tx01

# Assert function call success
assert_tx_success tx02 