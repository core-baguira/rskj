comment
// CONTRACT CODE
pragma solidity ^0.8.24;

contract TestTStorageDynamicExecutionContextWithStackOverflow {

    constructor() {
    }

    event OK();
    event ERROR(string, uint256);

    function testCallSelectingContractCallOpcode(uint256 contractCallSelector) external {
        // Deploy the Callee contract
        address calleeAddress = address(new Callee());
        uint256 success;
        uint256 valueLoadedFrom0;
        uint256 valueLoadedFrom1;
        bytes4 executeSignature = bytes4(keccak256("execute()"));

        assembly {
            tstore(0, 420)
            tstore(1, 420)

            let availablePointer := mload(0x40)
            mstore(availablePointer, executeSignature)
            // If useDelegateCall is greater than 0, execute delegateCall otherwise execute callCode
            switch contractCallSelector
            case 0 {
                success := callcode(0xFFFF, calleeAddress, 0, availablePointer, 0x4, availablePointer, 0x20)
            }
            case 1 {
                success := delegatecall(0xFFFF, calleeAddress, availablePointer, 0x4, availablePointer, 0x20)
            }
            default {
                success := call(0xFFFF, calleeAddress, 0, availablePointer, 0x4, availablePointer, 0x20)
            }
            valueLoadedFrom0 := tload(0)
            valueLoadedFrom1 := tload(1)
        }

        checkReturnValueExpected(success, 'Checking result callee execution', 0);
        checkReturnValueExpected(valueLoadedFrom0, 'Checking value from tload 0', 420);
        checkReturnValueExpected(valueLoadedFrom1, 'Checking value from tload 1', 420);
    }

    function checkReturnValueExpected(uint256 valueReceived, string memory message, uint256 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

contract Callee {

    function execute() external {
        assembly {
            tstore(1,69)
        }
        this.executeRecursive(0);
    }

    function executeRecursive(uint256 counter) external {
        if(counter < 1026){
            counter ++;
            this.executeRecursive(counter);
        }
    }
}

// CONTRACT BYTECODE

TestTStorageDynamicExecutionContextWithStackOverflow: 6080604052348015600e575f5ffd5b506106868061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80639823c4061461002d575b5f5ffd5b61004760048036038101906100429190610280565b610049565b005b5f6040516100569061023c565b604051809103905ff08015801561006f573d5f5f3e3d5ffd5b5090505f5f5f5f7f614619540b5b5abe478b88f28a37eb328054be3b41a7570ad5e8b701113364c490506101a45f5d6101a460015d604051818152865f81146100cd57600181146100e0576020826004845f8b61fffff195506100ee565b6020826004845f8b61fffff295506100ee565b6020826004848a61fffff495505b505f5c935060015c925050610139846040518060400160405280602081526020017f436865636b696e6720726573756c742063616c6c656520657865637574696f6e8152505f6101c5565b61017b836040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203000000000008152506101a46101c5565b6101bd826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203100000000008152506101a46101c5565b505050505050565b8083036101fd577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610237565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161022e92919061032a565b60405180910390a15b505050565b6102f88061035983390190565b5f5ffd5b5f819050919050565b61025f8161024d565b8114610269575f5ffd5b50565b5f8135905061027a81610256565b92915050565b5f6020828403121561029557610294610249565b5b5f6102a28482850161026c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102ed826102ab565b6102f781856102b5565b93506103078185602086016102c5565b610310816102d3565b840191505092915050565b6103248161024d565b82525050565b5f6040820190508181035f83015261034281856102e3565b9050610351602083018461031b565b939250505056fe6080604052348015600e575f5ffd5b506102dc8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80636146195414610038578063fccbafb914610042575b5f5ffd5b61004061005e565b005b61005c60048036038101906100579190610184565b6100cb565b005b604560015d3073ffffffffffffffffffffffffffffffffffffffff1663fccbafb95f6040518263ffffffff1660e01b815260040161009c91906101f1565b5f604051808303815f87803b1580156100b3575f5ffd5b505af11580156100c5573d5f5f3e3d5ffd5b50505050565b61040281101561014a5780806100e090610237565b9150503073ffffffffffffffffffffffffffffffffffffffff1663fccbafb9826040518263ffffffff1660e01b815260040161011c919061028d565b5f604051808303815f87803b158015610133575f5ffd5b505af1158015610145573d5f5f3e3d5ffd5b505050505b50565b5f5ffd5b5f819050919050565b61016381610151565b811461016d575f5ffd5b50565b5f8135905061017e8161015a565b92915050565b5f602082840312156101995761019861014d565b5b5f6101a684828501610170565b91505092915050565b5f819050919050565b5f819050919050565b5f6101db6101d66101d1846101af565b6101b8565b610151565b9050919050565b6101eb816101c1565b82525050565b5f6020820190506102045f8301846101e2565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61024182610151565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102735761027261020a565b5b600182019050919050565b61028781610151565b82525050565b5f6020820190506102a05f83018461027e565b9291505056fea26469706673582212208c06dbf10708fcc54598b88ca5465d5b4189bd294c289c13db194e75762635f764736f6c634300081c0033a2646970667358221220c007921bf7d900df9462a49fe9fca543537ec9f988ce2d601da8182ad224485364736f6c634300081c0033

9823c406: testCallSelectingContractCallOpcode(uint256)

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorageCallAndDelegateCall contract
transaction_build txDynamicExecutionContextWithStackOverflowTest
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f5ffd5b506106868061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80639823c4061461002d575b5f5ffd5b61004760048036038101906100429190610280565b610049565b005b5f6040516100569061023c565b604051809103905ff08015801561006f573d5f5f3e3d5ffd5b5090505f5f5f5f7f614619540b5b5abe478b88f28a37eb328054be3b41a7570ad5e8b701113364c490506101a45f5d6101a460015d604051818152865f81146100cd57600181146100e0576020826004845f8b61fffff195506100ee565b6020826004845f8b61fffff295506100ee565b6020826004848a61fffff495505b505f5c935060015c925050610139846040518060400160405280602081526020017f436865636b696e6720726573756c742063616c6c656520657865637574696f6e8152505f6101c5565b61017b836040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203000000000008152506101a46101c5565b6101bd826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203100000000008152506101a46101c5565b505050505050565b8083036101fd577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610237565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161022e92919061032a565b60405180910390a15b505050565b6102f88061035983390190565b5f5ffd5b5f819050919050565b61025f8161024d565b8114610269575f5ffd5b50565b5f8135905061027a81610256565b92915050565b5f6020828403121561029557610294610249565b5b5f6102a28482850161026c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102ed826102ab565b6102f781856102b5565b93506103078185602086016102c5565b610310816102d3565b840191505092915050565b6103248161024d565b82525050565b5f6040820190508181035f83015261034281856102e3565b9050610351602083018461031b565b939250505056fe6080604052348015600e575f5ffd5b506102dc8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80636146195414610038578063fccbafb914610042575b5f5ffd5b61004061005e565b005b61005c60048036038101906100579190610184565b6100cb565b005b604560015d3073ffffffffffffffffffffffffffffffffffffffff1663fccbafb95f6040518263ffffffff1660e01b815260040161009c91906101f1565b5f604051808303815f87803b1580156100b3575f5ffd5b505af11580156100c5573d5f5f3e3d5ffd5b50505050565b61040281101561014a5780806100e090610237565b9150503073ffffffffffffffffffffffffffffffffffffffff1663fccbafb9826040518263ffffffff1660e01b815260040161011c919061028d565b5f604051808303815f87803b158015610133575f5ffd5b505af1158015610145573d5f5f3e3d5ffd5b505050505b50565b5f5ffd5b5f819050919050565b61016381610151565b811461016d575f5ffd5b50565b5f8135905061017e8161015a565b92915050565b5f602082840312156101995761019861014d565b5b5f6101a684828501610170565b91505092915050565b5f819050919050565b5f819050919050565b5f6101db6101d66101d1846101af565b6101b8565b610151565b9050919050565b6101eb816101c1565b82525050565b5f6020820190506102045f8301846101e2565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61024182610151565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102735761027261020a565b5b600182019050919050565b61028781610151565b82525050565b5f6020820190506102a05f83018461027e565b9291505056fea26469706673582212208c06dbf10708fcc54598b88ca5465d5b4189bd294c289c13db194e75762635f764736f6c634300081c0033a2646970667358221220c007921bf7d900df9462a49fe9fca543537ec9f988ce2d601da8182ad224485364736f6c634300081c0033
    gas 1000000
    build

# Create block to hold txDynamicExecutionContextWithStackOverflowTest transaction
block_build b01
    parent g00
    transactions txDynamicExecutionContextWithStackOverflowTest
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute txExecuteCallCode transaction
transaction_build txExecuteCallCode
    sender acc1
    nonce 1
    contract txDynamicExecutionContextWithStackOverflowTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000000
    gas 500000
    build

# Create block to hold txExecuteCallCode transaction
block_build b02
    parent b01
    transactions txExecuteCallCode
    gasLimit 550000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02

# Create transaction to execute txExecuteDelegateCall transaction
transaction_build txExecuteDelegateCall
    sender acc1
    nonce 2
    contract txDynamicExecutionContextWithStackOverflowTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000001
    gas 500000
    build

# Create block to hold txExecuteDelegateCall transaction
block_build b03
    parent b02
    transactions txExecuteDelegateCall
    gasLimit 550000
    build

# Connect block
block_connect b03

# Check b03 is best block
assert_best b03

# Create transaction to execute txExecuteDelegateCall transaction
transaction_build txExecuteCall
    sender acc1
    nonce 3
    contract txDynamicExecutionContextWithStackOverflowTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000002
    gas 500000
    build

# Create block to hold txExecuteCall transaction
block_build b04
    parent b03
    transactions txExecuteCall
    gasLimit 550000
    build

# Connect block
block_connect b04

# Check b04 is best block
assert_best b04