comment

// CONTRACT CODE
pragma solidity ^0.8.24;

contract OnlyConstructorCode {

    constructor() {
        bytes32 valueLoadedInitially;
        bytes32 valueLoadedAfterStore;
        assembly{
            valueLoadedInitially := tload(0)
            tstore(1, 0x0000000000000000000000000000000000000000000000000000000000000002)
            valueLoadedAfterStore := tload(1)
        }
        if(valueLoadedInitially == 0x0000){
            emit OK();
        } else {
            emit ERROR(valueLoadedInitially);
        }

        if(valueLoadedAfterStore == 0x0000000000000000000000000000000000000000000000000000000000000002){
            emit OK();
        } else {
            emit ERROR(valueLoadedAfterStore);
        }
    }

    event OK();
    event ERROR(bytes32);
}

contract TestStorageCreateContexts {
    constructor(){
    }

    event OK();
    event ERROR(string, bytes32);

    function testOnlyConstructorCode() external {
        configureTransientStorageFromCaller();
        new OnlyConstructorCode();
        checkTransientStorageFromCaller();
    }

    function configureTransientStorageFromCaller() private {
        assembly{
            tstore(0, 0x0000000000000000000000000000000000000000000000000000000000000002)
            tstore(1, 0x0000000000000000000000000000000000000000000000000000000000000003)
            tstore(2, 0x0000000000000000000000000000000000000000000000000000000000000004)
            calldatacopy(0, 0, calldatasize())
        }
    }

    function checkTransientStorageFromCaller() private {
        bytes32 valueIn0Received;
        bytes32 valueIn1Received;
        bytes32 valueIn2Received;

        assembly{
            valueIn0Received := tload(0)
            valueIn1Received := tload(1)
            valueIn2Received := tload(2)
        }
        checkReturnValueExpected(valueIn0Received, 'Checking value in 0', 0x0000000000000000000000000000000000000000000000000000000000000002);
        checkReturnValueExpected(valueIn1Received, 'Checking value in 1', 0x0000000000000000000000000000000000000000000000000000000000000003);
        checkReturnValueExpected(valueIn2Received, 'Checking value in 2', 0x0000000000000000000000000000000000000000000000000000000000000004);
    }

    function checkReturnValueExpected(bytes32 valueReceived, string memory message, bytes32 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

// CONTRACT BYTECODE

TestStorageCreateContexts: 6080604052348015600e575f80fd5b5061045a8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806306c31e011461002d575b5f80fd5b610035610037565b005b61003f610070565b60405161004b906101da565b604051809103905ff080158015610064573d5f803e3d5ffd5b505061006e610084565b565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c90506100d8836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b610163565b61011b826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b610163565b61015e816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b610163565b505050565b80830361019b577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16101d5565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516101cc92919061026f565b60405180910390a15b505050565b6101878061029e83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610229826101e7565b61023381856101f1565b9350610243818560208601610201565b61024c8161020f565b840191505092915050565b5f819050919050565b61026981610257565b82525050565b5f6040820190508181035f830152610287818561021f565b90506102966020830184610260565b939250505056fe608060405234801561000f575f80fd5b505f805f5c9150600260015d60015c90505f801b820361005a577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610092565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9826040516100899190610124565b60405180910390a15b60025f1b81036100cd577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610105565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9816040516100fc9190610124565b60405180910390a15b505061013d565b5f819050919050565b61011e8161010c565b82525050565b5f6020820190506101375f830184610115565b92915050565b603e806101495f395ff3fe60806040525f80fdfea26469706673582212208c7f41dc7ce3e60c1ac6a8857d261787c82e80556c6e9301ddc90b0332365ae764736f6c634300081a0033a2646970667358221220dd0d78a91f17116a6d00e03e0496b3200f5de2bc835011e5943baa5b8dab956e64736f6c634300081a0033

06c31e01: testOnlyConstructorCode()

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorageCreateContextsContract contract
transaction_build txTestTransientStorageCreateContextsContract
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f80fd5b5061045a8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806306c31e011461002d575b5f80fd5b610035610037565b005b61003f610070565b60405161004b906101da565b604051809103905ff080158015610064573d5f803e3d5ffd5b505061006e610084565b565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c90506100d8836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b610163565b61011b826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b610163565b61015e816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b610163565b505050565b80830361019b577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16101d5565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516101cc92919061026f565b60405180910390a15b505050565b6101878061029e83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610229826101e7565b61023381856101f1565b9350610243818560208601610201565b61024c8161020f565b840191505092915050565b5f819050919050565b61026981610257565b82525050565b5f6040820190508181035f830152610287818561021f565b90506102966020830184610260565b939250505056fe608060405234801561000f575f80fd5b505f805f5c9150600260015d60015c90505f801b820361005a577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610092565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9826040516100899190610124565b60405180910390a15b60025f1b81036100cd577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610105565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9816040516100fc9190610124565b60405180910390a15b505061013d565b5f819050919050565b61011e8161010c565b82525050565b5f6020820190506101375f830184610115565b92915050565b603e806101495f395ff3fe60806040525f80fdfea26469706673582212208c7f41dc7ce3e60c1ac6a8857d261787c82e80556c6e9301ddc90b0332365ae764736f6c634300081a0033a2646970667358221220dd0d78a91f17116a6d00e03e0496b3200f5de2bc835011e5943baa5b8dab956e64736f6c634300081a0033
    gas 1000000
    build

# Create block to hold txTestTransientStorageCreateContextsContract transaction
block_build b01
    parent g00
    transactions txTestTransientStorageCreateContextsContract
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute txOnlyConstructorCode transaction
transaction_build txOnlyConstructorCode
    sender acc1
    nonce 1
    contract txTestTransientStorageCreateContextsContract
    value 0
    data 06c31e01
    gas 1000000
    build

# Create block to hold txOnlyConstructorCode transaction
block_build b02
    parent b01
    transactions txOnlyConstructorCode
    gasLimit 1200000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02