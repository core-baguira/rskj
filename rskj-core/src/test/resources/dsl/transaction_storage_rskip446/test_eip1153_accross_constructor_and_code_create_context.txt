comment

// CONTRACT CODE
pragma solidity ^0.8.24;

contract InConstructorAndCode {

    constructor() {
        bytes32 valueLoadedInitially;
        assembly{
            valueLoadedInitially := tload(0)
        }
        checkReturnValueExpected(valueLoadedInitially, 'Checking value loaded in 0 from creator is inacessible in constructor', 0x00);
    }

    event OK();
    event ERROR(string, bytes32);

    function deployedCode() external {
        bytes32 valueLoadedInitially;
        bytes32 valueLoadedAfterStore;
        assembly{
            valueLoadedInitially := tload(0)
            tstore(1,0x0000000000000000000000000000000100000000000000000000000000000001)
            valueLoadedAfterStore := tload(1)
        }
        checkReturnValueExpected(valueLoadedInitially, 'Checking value loaded in 0 from creator is inacessible in deployed code', 0x00);
        checkReturnValueExpected(valueLoadedAfterStore, 'Checking value stored in 1 from deployed is accessible', 0x0000000000000000000000000000000100000000000000000000000000000001);
    }


    function checkReturnValueExpected(bytes32 valueReceived, string memory message, bytes32 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

contract TestStorageCreateContexts {
    constructor(){
    }

    event OK();
    event ERROR(string, bytes32);

    function testInConstructorAndCode() external {
        configureTransientStorageFromCaller();
        InConstructorAndCode testContract = new InConstructorAndCode();
        testContract.deployedCode();
        checkTransientStorageFromCaller();
    }

    function configureTransientStorageFromCaller() private {
        assembly{
            tstore(0, 0x0000000000000000000000000000000000000000000000000000000000000002)
            tstore(1, 0x0000000000000000000000000000000000000000000000000000000000000003)
            tstore(2, 0x0000000000000000000000000000000000000000000000000000000000000004)
            calldatacopy(0, 0, calldatasize())
        }
    }

    function checkTransientStorageFromCaller() private {
        bytes32 valueIn0Received;
        bytes32 valueIn1Received;
        bytes32 valueIn2Received;

        assembly{
            valueIn0Received := tload(0)
            valueIn1Received := tload(1)
            valueIn2Received := tload(2)
        }
        checkReturnValueExpected(valueIn0Received, 'Checking value in 0', 0x0000000000000000000000000000000000000000000000000000000000000002);
        checkReturnValueExpected(valueIn1Received, 'Checking value in 1', 0x0000000000000000000000000000000000000000000000000000000000000003);
        checkReturnValueExpected(valueIn2Received, 'Checking value in 2', 0x0000000000000000000000000000000000000000000000000000000000000004);
    }

    function checkReturnValueExpected(bytes32 valueReceived, string memory message, bytes32 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

// CONTRACT BYTECODE

TestStorageCreateContexts: 6080604052348015600e575f80fd5b5061078c8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806324182ad51461002d575b5f80fd5b610035610037565b005b61003f6100ce565b5f60405161004c90610238565b604051809103905ff080158015610065573d5f803e3d5ffd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a45449eb6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100ad575f80fd5b505af11580156100bf573d5f803e3d5ffd5b505050506100cb6100e2565b50565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c9050610136836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b6101c1565b610179826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b6101c1565b6101bc816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b6101c1565b505050565b8083036101f9577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610233565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161022a9291906102cd565b60405180910390a15b505050565b61045b806102fc83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61028782610245565b610291818561024f565b93506102a181856020860161025f565b6102aa8161026d565b840191505092915050565b5f819050919050565b6102c7816102b5565b82525050565b5f6040820190508181035f8301526102e5818561027d565b90506102f460208301846102be565b939250505056fe608060405234801561000f575f80fd5b505f805c905061004081604051806080016040528060458152602001610416604591395f801b61004660201b60201c565b50610173565b80830361007e577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16100b8565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516100af929190610145565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6100ff826100bd565b61010981856100c7565b93506101198185602086016100d7565b610122816100e5565b840191505092915050565b5f819050919050565b61013f8161012d565b82525050565b5f6040820190508181035f83015261015d81856100f5565b905061016c6020830184610136565b9392505050565b610296806101805f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a45449eb1461002d575b5f80fd5b610035610037565b005b5f805f5c915070010000000000000000000000000000000160015d60015c905061007c826040518060800160405280604781526020016101e4604791395f801b6100b6565b6100b28160405180606001604052806036815260200161022b603691397001000000000000000000000000000000015f1b6100b6565b5050565b8083036100ee577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610128565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161011f9291906101b5565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61016f8261012d565b6101798185610137565b9350610189818560208601610147565b61019281610155565b840191505092915050565b5f819050919050565b6101af8161019d565b82525050565b5f6040820190508181035f8301526101cd8185610165565b90506101dc60208301846101a6565b939250505056fe436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c6520696e206465706c6f79656420636f6465436865636b696e672076616c75652073746f72656420696e20312066726f6d206465706c6f7965642069732061636365737369626c65a2646970667358221220ae9f2f2105aa599785a54367f1978fe66b23c8859417eb85cde0594ea119523f64736f6c634300081a0033436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c6520696e20636f6e7374727563746f72a264697066735822122067ca8c3e72b9ace66b3b729dc0f4a54eb74b78e28f989845e8a533b94484b8d264736f6c634300081a0033

24182ad5: testInConstructorAndCode()

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorageCreateContextsContract contract
transaction_build txTestTransientStorageCreateContextsContract
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f80fd5b5061045a8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806306c31e011461002d575b5f80fd5b610035610037565b005b61003f610070565b60405161004b906101da565b604051809103905ff080158015610064573d5f803e3d5ffd5b505061006e610084565b565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c90506100d8836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b610163565b61011b826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b610163565b61015e816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b610163565b505050565b80830361019b577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16101d5565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516101cc92919061026f565b60405180910390a15b505050565b6101878061029e83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610229826101e7565b61023381856101f1565b9350610243818560208601610201565b61024c8161020f565b840191505092915050565b5f819050919050565b61026981610257565b82525050565b5f6040820190508181035f830152610287818561021f565b90506102966020830184610260565b939250505056fe608060405234801561000f575f80fd5b505f805f5c9150600260015d60015c90505f801b820361005a577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610092565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9826040516100899190610124565b60405180910390a15b60025f1b81036100cd577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610105565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9816040516100fc9190610124565b60405180910390a15b505061013d565b5f819050919050565b61011e8161010c565b82525050565b5f6020820190506101375f830184610115565b92915050565b603e806101495f395ff3fe60806040525f80fdfea26469706673582212208c7f41dc7ce3e60c1ac6a8857d261787c82e80556c6e9301ddc90b0332365ae764736f6c634300081a0033a2646970667358221220dd0d78a91f17116a6d00e03e0496b3200f5de2bc835011e5943baa5b8dab956e64736f6c634300081a0033
    gas 1000000
    build

# Create block to hold txTestTransientStorageCreateContextsContract transaction
block_build b01
    parent g00
    transactions txTestTransientStorageCreateContextsContract
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute txInConstructorAndCode transaction
transaction_build txInConstructorAndCode
    sender acc1
    nonce 1
    contract txTestTransientStorageCreateContextsContract
    value 0
    data 24182ad5
    gas 1000000
    build

# Create block to hold txInConstructorAndCode transaction
block_build b02
    parent b01
    transactions txInConstructorAndCode
    gasLimit 1200000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02