comment

// CONTRACT CODE
pragma solidity ^0.8.24;

contract TstorageGasMeasureTestCases {
    uint public gasUsed;

    constructor()
    {

    }

    event OK();
    event ERROR(string, uint256);

    function checkGasMeasures() external {
        // Checking tload gas cost
        uint gasBefore;
        uint gasAfter;
        assembly {
            gasBefore := gas()
            let value := tload(0x10)
            gasAfter := gas()
        }
        gasUsed = gasBefore - gasAfter;
        checkReturnValueExpected(gasUsed, 'Checking tload gas spent is the expected', 110);

        // Checking tstore and tload gas cost
        assembly {
            gasBefore := gas()
            tstore(0x10, 0x10)
            let value := tload(0x10)
            gasAfter := gas()
        }
        gasUsed = gasBefore - gasAfter;
        checkReturnValueExpected(gasUsed, 'Checking tstore and tload gas spent is the expected', 216);

        // Checking tstore in a cold slot
        assembly {
            gasBefore := gas()
            tstore(0xFF, 0x10)
            gasAfter := gas()
        }
        gasUsed = gasBefore - gasAfter;
        checkReturnValueExpected(gasUsed, 'Checking tstore cold gas spent is the expected', 113);

        // Checking tstore warm
        assembly {
            gasBefore := gas()
            tstore(0xFF, 0x10)
            tstore(0xFF, 0x11)
            gasAfter := gas()
        }
        gasUsed = gasBefore - gasAfter;
        checkReturnValueExpected(gasUsed, 'Checking tstore warm gas spent is the expected', 219);
    }

    function checkReturnValueExpected(uint256 valueReceived, string memory message, uint256 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}
// DESCRIPTION

TstorageGasMeasureTestCases has the following functions:



// CONTRACT BYTECODE

TstorageGasMeasureTestCases: 6080604052348015600e575f5ffd5b506104098061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c806307e5ab1e14610038578063592cdadd14610042575b5f5ffd5b610040610060565b005b61004a610171565b6040516100579190610205565b60405180910390f35b5f5f5a915060105c5a9150508082610078919061024b565b5f819055506100a25f5460405180606001604052806028815260200161037e60289139606e610176565b5a91506010805d60105c5a91505080826100bc919061024b565b5f819055506100e65f5460405180606001604052806033815260200161034b6033913960d8610176565b5a9150601060ff5d5a905080826100fd919061024b565b5f819055506101275f546040518060600160405280602e81526020016103a6602e91396071610176565b5a9150601060ff5d601160ff5d5a90508082610143919061024b565b5f8190555061016d5f546040518060600160405280602e815260200161031d602e913960db610176565b5050565b5f5481565b8083036101ae577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16101e8565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f82846040516101df9291906102ee565b60405180910390a15b505050565b5f819050919050565b6101ff816101ed565b82525050565b5f6020820190506102185f8301846101f6565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610255826101ed565b9150610260836101ed565b92508282039050818111156102785761027761021e565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102c08261027e565b6102ca8185610288565b93506102da818560208601610298565b6102e3816102a6565b840191505092915050565b5f6040820190508181035f83015261030681856102b6565b905061031560208301846101f6565b939250505056fe436865636b696e67207473746f7265207761726d20676173207370656e7420697320746865206578706563746564436865636b696e67207473746f726520616e6420746c6f616420676173207370656e7420697320746865206578706563746564436865636b696e6720746c6f616420676173207370656e7420697320746865206578706563746564436865636b696e67207473746f726520636f6c6420676173207370656e7420697320746865206578706563746564a2646970667358221220b17e2b2108ab28708c0fb481438a67aaae5b4c10a6e07af3125fe9d609eb498c64736f6c634300081c0033

function hashes:

- 07e5ab1e: checkGasMeasures()
- 592cdadd: gasUsed()

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TstorageGasMeasureTestCases contract
transaction_build txTstorageGasMeasureTestContract
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f5ffd5b506104098061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c806307e5ab1e14610038578063592cdadd14610042575b5f5ffd5b610040610060565b005b61004a610171565b6040516100579190610205565b60405180910390f35b5f5f5a915060105c5a9150508082610078919061024b565b5f819055506100a25f5460405180606001604052806028815260200161037e60289139606e610176565b5a91506010805d60105c5a91505080826100bc919061024b565b5f819055506100e65f5460405180606001604052806033815260200161034b6033913960d8610176565b5a9150601060ff5d5a905080826100fd919061024b565b5f819055506101275f546040518060600160405280602e81526020016103a6602e91396071610176565b5a9150601060ff5d601160ff5d5a90508082610143919061024b565b5f8190555061016d5f546040518060600160405280602e815260200161031d602e913960db610176565b5050565b5f5481565b8083036101ae577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16101e8565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f82846040516101df9291906102ee565b60405180910390a15b505050565b5f819050919050565b6101ff816101ed565b82525050565b5f6020820190506102185f8301846101f6565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610255826101ed565b9150610260836101ed565b92508282039050818111156102785761027761021e565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102c08261027e565b6102ca8185610288565b93506102da818560208601610298565b6102e3816102a6565b840191505092915050565b5f6040820190508181035f83015261030681856102b6565b905061031560208301846101f6565b939250505056fe436865636b696e67207473746f7265207761726d20676173207370656e7420697320746865206578706563746564436865636b696e67207473746f726520616e6420746c6f616420676173207370656e7420697320746865206578706563746564436865636b696e6720746c6f616420676173207370656e7420697320746865206578706563746564436865636b696e67207473746f726520636f6c6420676173207370656e7420697320746865206578706563746564a2646970667358221220b17e2b2108ab28708c0fb481438a67aaae5b4c10a6e07af3125fe9d609eb498c64736f6c634300081c0033
    gas 1000000
    build

# Create block to hold txTstorageGasMeasureTestContract transaction
block_build b01
    parent g00
    transactions txTstorageGasMeasureTestContract
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute  txCheckGasMeasures function
transaction_build txCheckGasMeasures
    sender acc1
    nonce 1
    contract txTstorageGasMeasureTestContract
    value 0
    data 07e5ab1e
    gas 350000
    build

# Create block to hold txCheckGasMeasures transaction
block_build b02
    parent b01
    transactions txCheckGasMeasures
    gasLimit 400000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02