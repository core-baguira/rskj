comment

// CONTRACT CODE
pragma solidity ^0.8.24;

contract AcrossConstructorAndCodeV1 {
    constructor() {
        bytes32 valueLoadedInitially;
        assembly{
            valueLoadedInitially := tload(0)
            tstore(1, 0x0000000000000000000000000000000000000000000000000000000000000333)
        }
        checkReturnValueExpected(valueLoadedInitially, 'Checking value loaded in 0 from creator is inacessible in constructor', 0x00);
    }

    event OK();
    event ERROR(string, bytes32);

    function deployedCode() external {
        bytes32 valueLoadedInitially;
        bytes32 valueLoadedAfterStore;
        bytes32 valueLoadedAfterStore2;

        assembly{
            valueLoadedInitially := tload(0)
            valueLoadedAfterStore := tload(1)

            tstore(2, 0x0000000000000000000000000000000000000000000000000000000000000444)
            valueLoadedAfterStore2 := tload(2)
        }
        checkReturnValueExpected(valueLoadedInitially, 'Checking value loaded in 0 from creator is inacessible', 0x00);
        checkReturnValueExpected(valueLoadedAfterStore, 'Checking value stored in 1 from constructor is accesible', 0x0000000000000000000000000000000000000000000000000000000000000333);
        checkReturnValueExpected(valueLoadedAfterStore2, 'Checking value stored in 2 from deployed code is accesible', 0x0000000000000000000000000000000000000000000000000000000000000444);
    }

    function checkReturnValueExpected(bytes32 valueReceived, string memory message, bytes32 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

contract TestStorageCreateContexts {
    constructor(){
    }

    event OK();
    event ERROR(string, bytes32);

    function testAcrossConstructorAndCodeV1() external {
        configureTransientStorageFromCaller();
        AcrossConstructorAndCodeV1 testContract = new AcrossConstructorAndCodeV1();
        testContract.deployedCode();
        checkTransientStorageFromCaller();
    }

    function configureTransientStorageFromCaller() private {
        assembly{
            tstore(0, 0x0000000000000000000000000000000000000000000000000000000000000002)
            tstore(1, 0x0000000000000000000000000000000000000000000000000000000000000003)
            tstore(2, 0x0000000000000000000000000000000000000000000000000000000000000004)
            calldatacopy(0, 0, calldatasize())
        }
    }

    function checkTransientStorageFromCaller() private {
        bytes32 valueIn0Received;
        bytes32 valueIn1Received;
        bytes32 valueIn2Received;

        assembly{
            valueIn0Received := tload(0)
            valueIn1Received := tload(1)
            valueIn2Received := tload(2)
        }
        checkReturnValueExpected(valueIn0Received, 'Checking value in 0', 0x0000000000000000000000000000000000000000000000000000000000000002);
        checkReturnValueExpected(valueIn1Received, 'Checking value in 1', 0x0000000000000000000000000000000000000000000000000000000000000003);
        checkReturnValueExpected(valueIn2Received, 'Checking value in 2', 0x0000000000000000000000000000000000000000000000000000000000000004);
    }

    function checkReturnValueExpected(bytes32 valueReceived, string memory message, bytes32 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

// CONTRACT BYTECODE

TestStorageCreateContexts: 6080604052348015600e575f80fd5b506107cd8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80636fc138181461002d575b5f80fd5b610035610037565b005b61003f6100ce565b5f60405161004c90610238565b604051809103905ff080158015610065573d5f803e3d5ffd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a45449eb6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100ad575f80fd5b505af11580156100bf573d5f803e3d5ffd5b505050506100cb6100e2565b50565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c9050610136836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b6101c1565b610179826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b6101c1565b6101bc816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b6101c1565b505050565b8083036101f9577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610233565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161022a9291906102cd565b60405180910390a15b505050565b61049c806102fc83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61028782610245565b610291818561024f565b93506102a181856020860161025f565b6102aa8161026d565b840191505092915050565b5f819050919050565b6102c7816102b5565b82525050565b5f6040820190508181035f8301526102e5818561027d565b90506102f460208301846102be565b939250505056fe608060405234801561000f575f80fd5b505f805c905061033360015d61004681604051806080016040528060458152602001610457604591395f801b61004c60201b60201c565b50610179565b808303610084577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16100be565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516100b592919061014b565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610105826100c3565b61010f81856100cd565b935061011f8185602086016100dd565b610128816100eb565b840191505092915050565b5f819050919050565b61014581610133565b82525050565b5f6040820190508181035f83015261016381856100fb565b9050610172602083018461013c565b9392505050565b6102d1806101865f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a45449eb1461002d575b5f80fd5b610035610037565b005b5f805f805c925060015c915061044460025d60025c90506100738360405180606001604052806036815260200161022e603691395f801b6100c6565b61009a82604051806060016040528060388152602001610264603891396103335f1b6100c6565b6100c1816040518060600160405280603a81526020016101f4603a91396104445f1b6100c6565b505050565b8083036100fe577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610138565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161012f9291906101c5565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61017f8261013d565b6101898185610147565b9350610199818560208601610157565b6101a281610165565b840191505092915050565b5f819050919050565b6101bf816101ad565b82525050565b5f6040820190508181035f8301526101dd8185610175565b90506101ec60208301846101b6565b939250505056fe436865636b696e672076616c75652073746f72656420696e20322066726f6d206465706c6f79656420636f646520697320616363657369626c65436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c65436865636b696e672076616c75652073746f72656420696e20312066726f6d20636f6e7374727563746f7220697320616363657369626c65a264697066735822122016cae860d0cda920784f1ab4923dc095d7567876a114712426ec01cebbc6b2d464736f6c634300081a0033436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c6520696e20636f6e7374727563746f72a2646970667358221220da71a4ccc0ab9bca47a26db221968eb2cee1c312408b5ce77ce1aeecd4e8459164736f6c634300081a0033

6fc13818: testAcrossConstructorAndCodeV1()

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorageCreateContextsContract contract
transaction_build txTestTransientStorageCreateContextsContract
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f80fd5b506107cd8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80636fc138181461002d575b5f80fd5b610035610037565b005b61003f6100ce565b5f60405161004c90610238565b604051809103905ff080158015610065573d5f803e3d5ffd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a45449eb6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100ad575f80fd5b505af11580156100bf573d5f803e3d5ffd5b505050506100cb6100e2565b50565b60025f5d600360015d600460025d365f8037565b5f805f805c925060015c915060025c9050610136836040518060400160405280601381526020017f436865636b696e672076616c756520696e20300000000000000000000000000081525060025f1b6101c1565b610179826040518060400160405280601381526020017f436865636b696e672076616c756520696e20310000000000000000000000000081525060035f1b6101c1565b6101bc816040518060400160405280601381526020017f436865636b696e672076616c756520696e20320000000000000000000000000081525060045f1b6101c1565b505050565b8083036101f9577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610233565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161022a9291906102cd565b60405180910390a15b505050565b61049c806102fc83390190565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61028782610245565b610291818561024f565b93506102a181856020860161025f565b6102aa8161026d565b840191505092915050565b5f819050919050565b6102c7816102b5565b82525050565b5f6040820190508181035f8301526102e5818561027d565b90506102f460208301846102be565b939250505056fe608060405234801561000f575f80fd5b505f805c905061033360015d61004681604051806080016040528060458152602001610457604591395f801b61004c60201b60201c565b50610179565b808303610084577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16100be565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd382846040516100b592919061014b565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610105826100c3565b61010f81856100cd565b935061011f8185602086016100dd565b610128816100eb565b840191505092915050565b5f819050919050565b61014581610133565b82525050565b5f6040820190508181035f83015261016381856100fb565b9050610172602083018461013c565b9392505050565b6102d1806101865f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a45449eb1461002d575b5f80fd5b610035610037565b005b5f805f805c925060015c915061044460025d60025c90506100738360405180606001604052806036815260200161022e603691395f801b6100c6565b61009a82604051806060016040528060388152602001610264603891396103335f1b6100c6565b6100c1816040518060600160405280603a81526020016101f4603a91396104445f1b6100c6565b505050565b8083036100fe577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610138565b7f76846b797b13411b14ef41db4387da9918f2f43457c5528a2423c48d45704bd3828460405161012f9291906101c5565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61017f8261013d565b6101898185610147565b9350610199818560208601610157565b6101a281610165565b840191505092915050565b5f819050919050565b6101bf816101ad565b82525050565b5f6040820190508181035f8301526101dd8185610175565b90506101ec60208301846101b6565b939250505056fe436865636b696e672076616c75652073746f72656420696e20322066726f6d206465706c6f79656420636f646520697320616363657369626c65436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c65436865636b696e672076616c75652073746f72656420696e20312066726f6d20636f6e7374727563746f7220697320616363657369626c65a264697066735822122016cae860d0cda920784f1ab4923dc095d7567876a114712426ec01cebbc6b2d464736f6c634300081a0033436865636b696e672076616c7565206c6f6164656420696e20302066726f6d2063726561746f7220697320696e616365737369626c6520696e20636f6e7374727563746f72a2646970667358221220da71a4ccc0ab9bca47a26db221968eb2cee1c312408b5ce77ce1aeecd4e8459164736f6c634300081a0033
    gas 1000000
    build

# Create block to hold txTestTransientStorageCreateContextsContract transaction
block_build b01
    parent g00
    transactions txTestTransientStorageCreateContextsContract
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute txInConstructorAndCode transaction
transaction_build txAcrossConstructorAndCodeV1
    sender acc1
    nonce 1
    contract txTestTransientStorageCreateContextsContract
    value 0
    data 6fc13818
    gas 1000000
    build

# Create block to hold txAcrossConstructorAndCodeV1 transaction
block_build b02
    parent b01
    transactions txAcrossConstructorAndCodeV1
    gasLimit 3000000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02