comment
// CONTRACT CODE
pragma solidity ^0.8.24;

contract TestTStorageDynamicExecutionContextWithInvalid{

    constructor() {
    }

    event OK();
    event ERROR(string, uint256);

    function testCallSelectingContractCallOpcode(uint256 contractCallSelector) external {
        // Deploy the Callee contract
        address calleeAddress = address(new Callee());
        uint256 success;
        uint256 valueLoadedFrom0;
        uint256 valueLoadedFrom1;
        bytes4 executeSignature = bytes4(keccak256("execute()"));

        assembly {
            tstore(0, 420)
            tstore(1, 420)

            let availablePointer := mload(0x40)
            mstore(availablePointer, executeSignature)
            // If useDelegateCall is greater than 0, execute delegateCall otherwise execute callCode
            switch contractCallSelector
            case 0 {
                success := callcode(0xFF, calleeAddress, 0, availablePointer, 0x4, availablePointer, 0x20)
            }
            case 1 {
                success := delegatecall(0xFF, calleeAddress, availablePointer, 0x4, availablePointer, 0x20)
            }
            default {
                success := call(0xFF, calleeAddress, 0, availablePointer, 0x4, availablePointer, 0x20)
            }
            valueLoadedFrom0 := tload(0)
            valueLoadedFrom1 := tload(1)
        }

        checkReturnValueExpected(success, 'Checking result callee execution', 0);
        checkReturnValueExpected(valueLoadedFrom0, 'Checking value from tload 0', 420);
        checkReturnValueExpected(valueLoadedFrom1, 'Checking value from tload 1', 420);
    }

    function checkReturnValueExpected(uint256 valueReceived, string memory message, uint256 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

contract Callee {

    function execute() external {
        assembly {
            tstore(1, 69)
            invalid()
        }
    }
}

// CONTRACT BYTECODE

TestTStorageDynamicExecutionContextWithInvalid: 6080604052348015600e575f5ffd5b506104138061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80639823c4061461002d575b5f5ffd5b6100476004803603810190610042919061027c565b610049565b005b5f60405161005690610239565b604051809103905ff08015801561006f573d5f5f3e3d5ffd5b5090505f5f5f5f7f614619540b5b5abe478b88f28a37eb328054be3b41a7570ad5e8b701113364c490506101a45f5d6101a460015d604051818152865f81146100cc57600181146100de576020826004845f8b60fff195506100eb565b6020826004845f8b60fff295506100eb565b6020826004848a60fff495505b505f5c935060015c925050610136846040518060400160405280602081526020017f436865636b696e6720726573756c742063616c6c656520657865637574696f6e8152505f6101c2565b610178836040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203000000000008152506101a46101c2565b6101ba826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203100000000008152506101a46101c2565b505050505050565b8083036101fa577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610234565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161022b929190610326565b60405180910390a15b505050565b60898061035583390190565b5f5ffd5b5f819050919050565b61025b81610249565b8114610265575f5ffd5b50565b5f8135905061027681610252565b92915050565b5f6020828403121561029157610290610245565b5b5f61029e84828501610268565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102e9826102a7565b6102f381856102b1565b93506103038185602086016102c1565b61030c816102cf565b840191505092915050565b61032081610249565b82525050565b5f6040820190508181035f83015261033e81856102df565b905061034d6020830184610317565b939250505056fe6080604052348015600e575f5ffd5b50606f80601a5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636146195414602a575b5f5ffd5b60306032565b005b604560015dfefea26469706673582212207c61e75cb53c4ad046d081a86c932bf15e83580e0d3ceae3fa417efcab11607e64736f6c634300081c0033a264697066735822122099e5211521504bd8cd35e3f045924e1065174f722e1fb24d137b65571be0fbb364736f6c634300081c0033

9823c406: testCallSelectingContractCallOpcode(uint256)

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorageCallAndDelegateCall contract
transaction_build txDynamicExecutionContextWithInvalidTest
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052348015600e575f5ffd5b506104138061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80639823c4061461002d575b5f5ffd5b6100476004803603810190610042919061027c565b610049565b005b5f60405161005690610239565b604051809103905ff08015801561006f573d5f5f3e3d5ffd5b5090505f5f5f5f7f614619540b5b5abe478b88f28a37eb328054be3b41a7570ad5e8b701113364c490506101a45f5d6101a460015d604051818152865f81146100cc57600181146100de576020826004845f8b60fff195506100eb565b6020826004845f8b60fff295506100eb565b6020826004848a60fff495505b505f5c935060015c925050610136846040518060400160405280602081526020017f436865636b696e6720726573756c742063616c6c656520657865637574696f6e8152505f6101c2565b610178836040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203000000000008152506101a46101c2565b6101ba826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d20746c6f6164203100000000008152506101a46101c2565b505050505050565b8083036101fa577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610234565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161022b929190610326565b60405180910390a15b505050565b60898061035583390190565b5f5ffd5b5f819050919050565b61025b81610249565b8114610265575f5ffd5b50565b5f8135905061027681610252565b92915050565b5f6020828403121561029157610290610245565b5b5f61029e84828501610268565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102e9826102a7565b6102f381856102b1565b93506103038185602086016102c1565b61030c816102cf565b840191505092915050565b61032081610249565b82525050565b5f6040820190508181035f83015261033e81856102df565b905061034d6020830184610317565b939250505056fe6080604052348015600e575f5ffd5b50606f80601a5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636146195414602a575b5f5ffd5b60306032565b005b604560015dfefea26469706673582212207c61e75cb53c4ad046d081a86c932bf15e83580e0d3ceae3fa417efcab11607e64736f6c634300081c0033a264697066735822122099e5211521504bd8cd35e3f045924e1065174f722e1fb24d137b65571be0fbb364736f6c634300081c0033
    gas 1000000
    build

# Create block to hold txDynamicExecutionContextWithInvalidTest transaction
block_build b01
    parent g00
    transactions txDynamicExecutionContextWithInvalidTest
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute txExecuteCallCode transaction
transaction_build txExecuteCallCode
    sender acc1
    nonce 1
    contract txDynamicExecutionContextWithInvalidTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000000
    gas 500000
    build

# Create transaction to execute txExecuteDelegateCall transaction
transaction_build txExecuteDelegateCall
    sender acc1
    nonce 2
    contract txDynamicExecutionContextWithInvalidTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000001
    gas 500000
    build

# Create transaction to execute txExecuteDelegateCall transaction
transaction_build txExecuteCall
    sender acc1
    nonce 3
    contract txDynamicExecutionContextWithInvalidTest
    value 0
    data 9823c4060000000000000000000000000000000000000000000000000000000000000002
    gas 500000
    build

# Create block to hold transactions
block_build b02
    parent b01
    transactions txExecuteCallCode  txExecuteDelegateCall txExecuteCall
    gasLimit 2000000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02