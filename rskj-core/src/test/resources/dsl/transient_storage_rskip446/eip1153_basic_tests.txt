comment

// CONTRACT CODE
pragma solidity ^0.8.24;

contract TestsTransientStorageEip1153BasicScenarios {
    bytes32[] slotsToTest = new bytes32[](4);

    constructor() {
        slotsToTest[0] = 0x0000000000000000000000000000000000000000000000000000000000000001;
        slotsToTest[1] = 0x0000000000000000000000000000000000000000000000000000000000000002;
        slotsToTest[2] = 0x0000000000000000000000000000000100000000000000000000000000000000;
        slotsToTest[3] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
    }

    event OK();
    event ERROR(bytes32);

    // Test that loading an arbitrary value is 0 at beginning of transaction: TLOAD(x) is 0
    function testTransientUnsetValues() external {
        bytes32 valueLoaded;
        for (uint i = 0; i < slotsToTest.length; i++) {
            bytes32 currentSlot = slotsToTest[i];
            assembly {
                valueLoaded := tload(currentSlot)
            }
            if (valueLoaded == 0x0) {
                emit OK();
            } else {
                emit ERROR(valueLoaded);
            }
        }
    }

    // Test that Loading after storing returns the stored value: TSTORE(x, y), TLOAD(x) returns y
    function testTloadAfterTstore() external {
        bytes32 valueLoaded;
        for (uint i = 0; i < slotsToTest.length; i++) {
            bytes32 currentSlot = slotsToTest[i];
            assembly {
                tstore(currentSlot, currentSlot)
                valueLoaded := tload(currentSlot)
            }
            if (valueLoaded == currentSlot) {
                emit OK();
            } else {
                emit ERROR(valueLoaded);
            }
        }
    }

    // Transient loading after storing does not return the stored value: STORE(x, y), TLOAD(x) returns 0
    function testTloadAfterSstore() external {
        bytes32 valueLoaded;
        for (uint i = 0; i < slotsToTest.length; i++) {
            bytes32 currentSlot = slotsToTest[i];
            assembly {
                sstore(currentSlot, 0xFF)
                valueLoaded := tload(currentSlot)
            }
            if (valueLoaded == 0x0) {
                emit OK();
            } else {
                emit ERROR(valueLoaded);
            }
        }
    }

    // Transient loading after storing does not return the stored value: STORE(x, y), TLOAD(x) returns 0
    function testTloadAfterTstoreIsZero() external {
        bytes32 valueLoaded;
        bytes32[] memory slotsDifferentKeys = new bytes32[](4);
        slotsDifferentKeys[0] = 0x0000000000000000000000000000000000000000000000000000000000000003;
        slotsDifferentKeys[1] = 0x0000000000000000000000000000000000000000000000000000000000000004;
        slotsDifferentKeys[2] = 0x0000000000000000000000000000000100000000000000000000000000000001;
        slotsDifferentKeys[3] = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;
        for (uint i = 0; i < slotsToTest.length; i++) {
            bytes32 currentSlot = slotsToTest[i];
            bytes32 currentSlotDifferent = slotsDifferentKeys[i];
            assembly {
                tstore(currentSlot, 0x4D2)
                valueLoaded := tload(currentSlotDifferent)
            }
            if (valueLoaded == 0x0) {
                emit OK();
            } else {
                emit ERROR(valueLoaded);
            }
        }
    }
}

// CONTRACT BYTECODE

TestsTransientStorageEip1153BasicScenarios: 6080604052600467ffffffffffffffff81111561001f5761001e610198565b5b60405190808252806020026020018201604052801561004d5781602001602082028036833780820191505090505b505f9080519060200190610062929190610132565b5034801561006e575f80fd5b5060015f1b5f8081548110610086576100856101c5565b5b905f5260205f20018190555060025f1b5f6001815481106100aa576100a96101c5565b5b905f5260205f2001819055507001000000000000000000000000000000005f1b5f6002815481106100de576100dd6101c5565b5b905f5260205f2001819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f1b5f600381548110610121576101206101c5565b5b905f5260205f2001819055506101f2565b828054828255905f5260205f2090810192821561016c579160200282015b8281111561016b578251825591602001919060010190610150565b5b509050610179919061017d565b5090565b5b80821115610194575f815f90555060010161017e565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b61054d806101ff5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806308cf7e911461004e5780633ba13899146100585780634f3f02ee14610062578063d0519a7f1461006c575b5f80fd5b610056610076565b005b610060610130565b005b61006a610316565b005b6100746103cf565b005b5f805f90505b5f8054905081101561012c575f80828154811061009c5761009b61048c565b5b905f5260205f200154905080815d805c92508083036100e6577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a161011e565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd98360405161011591906104d1565b60405180910390a15b50808060010191505061007c565b5050565b5f80600467ffffffffffffffff81111561014d5761014c6104ea565b5b60405190808252806020026020018201604052801561017b5781602001602082028036833780820191505090505b50905060035f1b815f815181106101955761019461048c565b5b60200260200101818152505060045f1b816001815181106101b9576101b861048c565b5b6020026020010181815250507001000000000000000000000000000000015f1b816002815181106101ed576101ec61048c565b5b6020026020010181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5f1b816003815181106102305761022f61048c565b5b6020026020010181815250505f5b5f80549050811015610311575f80828154811061025e5761025d61048c565b5b905f5260205f20015490505f83838151811061027d5761027c61048c565b5b602002602001015190506104d2825d805c94505f801b85036102ca577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610302565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9856040516102f991906104d1565b60405180910390a15b5050808060010191505061023e565b505050565b5f805f90505b5f805490508110156103cb575f80828154811061033c5761033b61048c565b5b905f5260205f2001549050805c92505f801b8303610385577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16103bd565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9836040516103b491906104d1565b60405180910390a15b50808060010191505061031c565b5050565b5f805f90505b5f80549050811015610488575f8082815481106103f5576103f461048c565b5b905f5260205f200154905060ff8155805c92505f801b8303610442577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a161047a565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd98360405161047191906104d1565b60405180910390a15b5080806001019150506103d5565b5050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b6104cb816104b9565b82525050565b5f6020820190506104e45f8301846104c2565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea26469706673582212204bf46b78c1fcafe2ef7b46d0b4632777b5d37316aed745194ce7eac231a4f4c464736f6c634300081a0033

// CONTRACT CALLS

TestsTransientStorageEip1153BasicScenarios:

 - d0519a7f: testTloadAfterSstore()
 - 08cf7e91: testTloadAfterTstore()
 - 4f3f02ee: testTransientUnsetValues()
 - 3ba13899: testTloadAfterTstoreIsZero()

end


# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TestTransientStorage contract
transaction_build txTestTransientStorageContract
    sender acc1
    receiverAddress 00
    value 0
    data 6080604052600467ffffffffffffffff81111561001f5761001e610198565b5b60405190808252806020026020018201604052801561004d5781602001602082028036833780820191505090505b505f9080519060200190610062929190610132565b5034801561006e575f80fd5b5060015f1b5f8081548110610086576100856101c5565b5b905f5260205f20018190555060025f1b5f6001815481106100aa576100a96101c5565b5b905f5260205f2001819055507001000000000000000000000000000000005f1b5f6002815481106100de576100dd6101c5565b5b905f5260205f2001819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f1b5f600381548110610121576101206101c5565b5b905f5260205f2001819055506101f2565b828054828255905f5260205f2090810192821561016c579160200282015b8281111561016b578251825591602001919060010190610150565b5b509050610179919061017d565b5090565b5b80821115610194575f815f90555060010161017e565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b61054d806101ff5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806308cf7e911461004e5780633ba13899146100585780634f3f02ee14610062578063d0519a7f1461006c575b5f80fd5b610056610076565b005b610060610130565b005b61006a610316565b005b6100746103cf565b005b5f805f90505b5f8054905081101561012c575f80828154811061009c5761009b61048c565b5b905f5260205f200154905080815d805c92508083036100e6577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a161011e565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd98360405161011591906104d1565b60405180910390a15b50808060010191505061007c565b5050565b5f80600467ffffffffffffffff81111561014d5761014c6104ea565b5b60405190808252806020026020018201604052801561017b5781602001602082028036833780820191505090505b50905060035f1b815f815181106101955761019461048c565b5b60200260200101818152505060045f1b816001815181106101b9576101b861048c565b5b6020026020010181815250507001000000000000000000000000000000015f1b816002815181106101ed576101ec61048c565b5b6020026020010181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5f1b816003815181106102305761022f61048c565b5b6020026020010181815250505f5b5f80549050811015610311575f80828154811061025e5761025d61048c565b5b905f5260205f20015490505f83838151811061027d5761027c61048c565b5b602002602001015190506104d2825d805c94505f801b85036102ca577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610302565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9856040516102f991906104d1565b60405180910390a15b5050808060010191505061023e565b505050565b5f805f90505b5f805490508110156103cb575f80828154811061033c5761033b61048c565b5b905f5260205f2001549050805c92505f801b8303610385577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a16103bd565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd9836040516103b491906104d1565b60405180910390a15b50808060010191505061031c565b5050565b5f805f90505b5f80549050811015610488575f8082815481106103f5576103f461048c565b5b905f5260205f200154905060ff8155805c92505f801b8303610442577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a161047a565b7f2fe0d3bd8bbb632441eefda46ec52f1ddda3a9e827d14c40f422037320f28bd98360405161047191906104d1565b60405180910390a15b5080806001019150506103d5565b5050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b6104cb816104b9565b82525050565b5f6020820190506104e45f8301846104c2565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea26469706673582212204bf46b78c1fcafe2ef7b46d0b4632777b5d37316aed745194ce7eac231a4f4c464736f6c634300081a0033
    gas 1000000
    build

# Create block to hold txTestTransientStorageContract transaction
block_build b01
    parent g00
    transactions txTestTransientStorageContract
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute
transaction_build txTestTloadAfterSstore
    sender acc1
    nonce 1
    contract txTestTransientStorageContract
    value 0
    data d0519a7f
    gas 200000
    build

# Create block to hold TloadAfterSstore transaction
block_build b02
    parent b01
    transactions txTestTloadAfterSstore
    gasLimit 350000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02

# Create transaction to execute
transaction_build txTestTloadAfterTstore
    sender acc1
    nonce 2
    contract txTestTransientStorageContract
    value 0
    data 08cf7e91
    gas 200000
    build

# Create block to hold txTest transaction
block_build b03
    parent b02
    transactions txTestTloadAfterTstore
    gasLimit 350000
    build

# Connect block
block_connect b03

# Check b03 is best block
assert_best b03

# Create transaction to execute
transaction_build txTestTransientUnsetValues
    sender acc1
    nonce 3
    contract txTestTransientStorageContract
    value 0
    data 4f3f02ee
    gas 200000
    build

# Create block to hold txTestTransientUnsetValues transaction
block_build b04
    parent b03
    transactions txTestTransientUnsetValues
    gasLimit 350000
    build

# Connect block
block_connect b04

# Check b04 is best block
assert_best b04

# Create transaction to execute
transaction_build txTestTloadAfterTstoreIsZero
    sender acc1
    nonce 4
    contract txTestTransientStorageContract
    value 0
    data 3ba13899
    gas 200000
    build

# Create block to hold txTestTloadAfterTstoreIsZero transaction
block_build b05
    parent b04
    transactions txTestTloadAfterTstoreIsZero
    gasLimit 350000
    build

# Connect block
block_connect b05

# Check b05 is best block
assert_best b05