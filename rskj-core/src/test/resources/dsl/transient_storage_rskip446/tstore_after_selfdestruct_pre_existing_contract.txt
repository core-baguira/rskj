comment

// CONTRACT CODE

pragma solidity ^0.8.24;

contract TstoreAfterSelfdestructingPreExistingContract {
    Callee callee;

    constructor() {
        callee = new Callee();
    }

    event OK();
    event ERROR(string, uint256);

    function performTest() external {
        address calleeAddress = address(callee);
        uint256 resultCallOption1;
        uint256 resultCallOption2;
        uint256 resultCallOption3;
        uint256 valueLoadedFromMemory;
        bytes4 executeSignature = bytes4(keccak256("execute(uint256)"));

        assembly {
        // Call Option 1: Executes selfdestruct in callee contract
            let availablePointerCallOption1 := mload(0x40)
            mstore(availablePointerCallOption1, executeSignature)
            mstore(add(availablePointerCallOption1, 4), 1)
            resultCallOption1 := call(gas(), calleeAddress, 0, availablePointerCallOption1, 0x24, availablePointerCallOption1, 0x20)

        // Call Option 2: Executes tstore in callee contract
            let availablePointerCallOption2 := mload(0x40)
            mstore(availablePointerCallOption2, executeSignature)
            mstore(add(availablePointerCallOption2, 4), 2)
            resultCallOption2 := call(gas(), calleeAddress, 0, availablePointerCallOption2, 0x24, availablePointerCallOption2, 0x20)


        // Call Option 3: Executes tload, store it in memory and return data
            let availablePointerCallOption3 := mload(0x40)
            mstore(availablePointerCallOption3, executeSignature)
            mstore(add(availablePointerCallOption3, 4), 3)
            resultCallOption3 := call(gas(), calleeAddress, 0, availablePointerCallOption3, 0x24, availablePointerCallOption3, 0x20)

        // Copy returndata into memory to retrieve the returned value
            returndatacopy(availablePointerCallOption3, 0, returndatasize())
            valueLoadedFromMemory := mload(availablePointerCallOption3)
        }

        checkReturnValueExpected(resultCallOption1, 'Checking result call option 1', 0x01);
        checkReturnValueExpected(resultCallOption2, 'Checking result call option 2', 0x01);
        checkReturnValueExpected(resultCallOption3, 'Checking result call option 3', 0x01);
        checkReturnValueExpected(valueLoadedFromMemory, 'Checking value from mload 0', 0x100);
    }

    function checkReturnValueExpected(uint256 valueReceived, string memory message, uint256 expectedValue) private {
        if( valueReceived == expectedValue){
            emit OK();
        } else {
            emit ERROR(message, valueReceived);
        }
    }
}

contract Callee {

    event OK();
    event ERROR(string, uint256);

    function execute(uint256 callOption) external returns (uint256) {
        assembly {
            switch callOption
            case 1 {
                selfdestruct(0)
            }
            case 2 {
                tstore(0xFF, 0x100)
            }
            case 3 {
            // Load value from transient storage
                let value := tload(0xFF)
                mstore(0x00, value) // Store it in memory to return
                return(0x00, 0x20) // Return 32 bytes from memory
            }
        }
    }
}

// DESCRIPTION

// CONTRACT BYTECODE

TstoreAfterSelfdestructingPreExistingContract: 608060405234801561000f575f80fd5b5060405161001c90610079565b604051809103905ff080158015610035573d5f803e3d5ffd5b505f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610086565b610178806103f683390190565b610363806100935f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80630d0b85f11461002d575b5f80fd5b610035610037565b005b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f805f805f7ffe0d94c1a8f5608a1172c49cc7704ac011b690506896af15ba9aab651ff44e1b9050604051818152600160048201526020816024835f8b5af19550604051828152600260048201526020816024835f8c5af19550604051838152600360048201526020816024835f8d5af195503d5f823e8051945050505061011a856040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203100000081525060016101e6565b61015b846040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203200000081525060016101e6565b61019c836040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203300000081525060016101e6565b6101de826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d206d6c6f6164203000000000008152506101006101e6565b505050505050565b80830361021e577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610258565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161024f9291906102ff565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610294578082015181840152602081019050610279565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6102b98261025d565b6102c38185610267565b93506102d3818560208601610277565b6102dc8161029f565b840191505092915050565b5f819050919050565b6102f9816102e7565b82525050565b5f6040820190508181035f83015261031781856102af565b905061032660208301846102f0565b939250505056fea2646970667358221220430065adaea3ec55b26991f3b100cb73215160e30134979bc834001868b7049464736f6c63430008180033608060405234801561000f575f80fd5b5061015b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063fe0d94c11461002d575b5f80fd5b610047600480360381019061004291906100d2565b61005d565b604051610054919061010c565b60405180910390f35b5f816001811461007c576002811461007f576003811461008a57610095565b5fff5b61010060ff5d610095565b60ff5c805f5260205ff35b50919050565b5f80fd5b5f819050919050565b6100b18161009f565b81146100bb575f80fd5b50565b5f813590506100cc816100a8565b92915050565b5f602082840312156100e7576100e661009b565b5b5f6100f4848285016100be565b91505092915050565b6101068161009f565b82525050565b5f60208201905061011f5f8301846100fd565b9291505056fea26469706673582212202863e4706ef82faa6ad13fcf9e1ee1699e2008d0c74aa076910f6421a8bacd5b64736f6c63430008180033

function hashes:

- 0d0b85f1: performTest()

end

# Create and fund new account
account_new acc1 10000000

# Create transaction to deploy TloadAfterSelfdestructPreExistingContract contract
transaction_build txDeployTestContract
    sender acc1
    receiverAddress 00
    value 0
    data 608060405234801561000f575f80fd5b5060405161001c90610079565b604051809103905ff080158015610035573d5f803e3d5ffd5b505f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610086565b610178806103f683390190565b610363806100935f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80630d0b85f11461002d575b5f80fd5b610035610037565b005b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f805f805f7ffe0d94c1a8f5608a1172c49cc7704ac011b690506896af15ba9aab651ff44e1b9050604051818152600160048201526020816024835f8b5af19550604051828152600260048201526020816024835f8c5af19550604051838152600360048201526020816024835f8d5af195503d5f823e8051945050505061011a856040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203100000081525060016101e6565b61015b846040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203200000081525060016101e6565b61019c836040518060400160405280601d81526020017f436865636b696e6720726573756c742063616c6c206f7074696f6e203300000081525060016101e6565b6101de826040518060400160405280601b81526020017f436865636b696e672076616c75652066726f6d206d6c6f6164203000000000008152506101006101e6565b505050505050565b80830361021e577fd48fe2800bace8f5ca2450feacbd6efc681b1cd0115019bb49fa529b6171bf6760405160405180910390a1610258565b7fc9e730d5b570f89e168eb8c3d29f8c396b957e540af248c95c9519ac47c2c69f828460405161024f9291906102ff565b60405180910390a15b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610294578082015181840152602081019050610279565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6102b98261025d565b6102c38185610267565b93506102d3818560208601610277565b6102dc8161029f565b840191505092915050565b5f819050919050565b6102f9816102e7565b82525050565b5f6040820190508181035f83015261031781856102af565b905061032660208301846102f0565b939250505056fea2646970667358221220430065adaea3ec55b26991f3b100cb73215160e30134979bc834001868b7049464736f6c63430008180033608060405234801561000f575f80fd5b5061015b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063fe0d94c11461002d575b5f80fd5b610047600480360381019061004291906100d2565b61005d565b604051610054919061010c565b60405180910390f35b5f816001811461007c576002811461007f576003811461008a57610095565b5fff5b61010060ff5d610095565b60ff5c805f5260205ff35b50919050565b5f80fd5b5f819050919050565b6100b18161009f565b81146100bb575f80fd5b50565b5f813590506100cc816100a8565b92915050565b5f602082840312156100e7576100e661009b565b5b5f6100f4848285016100be565b91505092915050565b6101068161009f565b82525050565b5f60208201905061011f5f8301846100fd565b9291505056fea26469706673582212202863e4706ef82faa6ad13fcf9e1ee1699e2008d0c74aa076910f6421a8bacd5b64736f6c63430008180033
    gas 1000000
    build

# Create block to hold txDeployTestContract transaction
block_build b01
    parent g00
    transactions txDeployTestContract
    gasLimit 1200000
    build

# Connect block
block_connect b01

# Check b01 is best block
assert_best b01

# Create transaction to execute  performTest function from contract
transaction_build txPerformTest
    sender acc1
    nonce 1
    contract txDeployTestContract
    value 0
    data 0d0b85f1
    gas 300000
    build

# Create block to hold txPerformTest transaction
block_build b02
    parent b01
    transactions txPerformTest
    gasLimit 350000
    build

# Connect block
block_connect b02

# Check b02 is best block
assert_best b02